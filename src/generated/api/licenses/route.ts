/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_License } from "@/generated/models"
import { KoaRuntimeError } from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import { Params } from "@nahkies/typescript-koa-runtime/zod"
import { NextRequest } from "next/server"

export type GetLicensesResponder = {
  with200(): KoaRuntimeResponse<t_License[]>
} & KoaRuntimeResponder

export type GetLicenses = (
  params: Params<void, void, void, void>,
  respond: GetLicensesResponder,
  ctx: { request: NextRequest },
) => Promise<KoaRuntimeResponse<unknown>>

export const _GET =
  (implementation: GetLicenses) =>
  async (
    request: NextRequest,
    { params }: { params: unknown },
  ): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_License[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(input, responder, { request })
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }
