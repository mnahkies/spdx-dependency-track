/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */

import {
  t_GetRepositoryScanParamSchema,
  t_GetRepositoryScanQuerySchema,
  t_RepositoryScanDependency,
} from "@/generated/models"
import {PermissiveBoolean} from "@/generated/schemas"
import {
  KoaRuntimeError,
  RequestInputType,
} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import {Params, parseRequestInput} from "@nahkies/typescript-koa-runtime/zod"
import {NextRequest} from "next/server"
import {z} from "zod"

export type GetRepositoryScanResponder = {
  with200(): KoaRuntimeResponse<t_RepositoryScanDependency[]>
} & KoaRuntimeResponder

export type GetRepositoryScan = (
  params: Params<
    t_GetRepositoryScanParamSchema,
    t_GetRepositoryScanQuerySchema,
    void,
    void
  >,
  respond: GetRepositoryScanResponder,
  ctx: {request: NextRequest},
) => Promise<KoaRuntimeResponse<unknown>>

const getRepositoryScanParamSchema = z.object({
  repositoryId: z.string(),
  scanId: z.string(),
})

const getRepositoryScanQuerySchema = z.object({
  excludePermissive: PermissiveBoolean.optional(),
})

export const _GET =
  (implementation: GetRepositoryScan) =>
  async (
    request: NextRequest,
    {params}: {params: unknown},
  ): Promise<Response> => {
    const input = {
      params: parseRequestInput(
        getRepositoryScanParamSchema,
        params,
        RequestInputType.RouteParam,
      ),
      // TODO: this swallows repeated parameters
      query: parseRequestInput(
        getRepositoryScanQuerySchema,
        Object.fromEntries(request.nextUrl.searchParams.entries()),
        RequestInputType.QueryString,
      ),
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_RepositoryScanDependency[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, {request})
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }
