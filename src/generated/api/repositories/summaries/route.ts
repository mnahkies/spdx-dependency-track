/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */
/* eslint-disable */

import { t_RepositorySummary } from "@/generated/models"
import { KoaRuntimeError } from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import { NextRequest } from "next/server"

// /api/repositories/summaries
export type GetRepositorySummariesResponder = {
  with200(): KoaRuntimeResponse<t_RepositorySummary[]>
} & KoaRuntimeResponder

export type GetRepositorySummaries = (
  respond: GetRepositorySummariesResponder,
  request: NextRequest,
) => Promise<KoaRuntimeResponse<unknown>>

export const _GET =
  (implementation: GetRepositorySummaries) =>
  async (request: NextRequest): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_RepositorySummary[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const { status, body } = await implementation(responder, request)
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, { status })
      : new Response(undefined, { status })
  }
