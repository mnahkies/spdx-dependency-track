/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */

import {t_RepositorySummary} from "@/generated/models"
import {KoaRuntimeError} from "@nahkies/typescript-koa-runtime/errors"
import {
  KoaRuntimeResponder,
  KoaRuntimeResponse,
  StatusCode,
} from "@nahkies/typescript-koa-runtime/server"
import {Params} from "@nahkies/typescript-koa-runtime/zod"
import {NextRequest} from "next/server"

export type GetRepositorySummariesResponder = {
  with200(): KoaRuntimeResponse<t_RepositorySummary[]>
} & KoaRuntimeResponder

export type GetRepositorySummaries = (
  params: Params<void, void, void, void>,
  respond: GetRepositorySummariesResponder,
  ctx: {request: NextRequest},
) => Promise<KoaRuntimeResponse<unknown>>

export const _GET =
  (implementation: GetRepositorySummaries) =>
  async (
    request: NextRequest,
    {params}: {params: unknown},
  ): Promise<Response> => {
    const input = {
      params: undefined,
      // TODO: this swallows repeated parameters
      query: undefined,
      body: undefined,
      headers: undefined,
    }

    const responder = {
      with200() {
        return new KoaRuntimeResponse<t_RepositorySummary[]>(200)
      },
      withStatus(status: StatusCode) {
        return new KoaRuntimeResponse(status)
      },
    }

    const {status, body} = await implementation(input, responder, {request})
      .then((it) => it.unpack())
      .catch((err) => {
        throw KoaRuntimeError.HandlerError(err)
      })

    return body !== undefined
      ? Response.json(body, {status})
      : new Response(undefined, {status})
  }
