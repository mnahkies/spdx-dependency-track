/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */

import {
  t_License,
  t_RepositoryScan,
  t_RepositoryScanDependency,
  t_RepositorySummary,
  t_scanRepositoriesJsonRequestBody,
} from "@/generated/models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  Server,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {
  basePath: Server<"ApiClient"> | string
}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async getLicenses(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_License[]>> {
    const url = this.basePath + `/api/licenses`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getRepositorySummaries(
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_RepositorySummary[]>> {
    const url = this.basePath + `/api/repositories/summaries`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getRepositorySummary(
    p: {
      repositoryId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_RepositorySummary>> {
    const url = this.basePath + `/api/repositories/${p["repositoryId"]}/summary`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getRepositoryScans(
    p: {
      repositoryId: string
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_RepositoryScan[]>> {
    const url = this.basePath + `/api/repositories/${p["repositoryId"]}/scans`
    const headers = this._headers({}, opts.headers)

    return this._fetch(url, {method: "GET", ...opts, headers}, timeout)
  }

  async getRepositoryScan(
    p: {
      repositoryId: string
      scanId: string
      excludePermissive?: boolean
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<200, t_RepositoryScanDependency[]>> {
    const url =
      this.basePath +
      `/api/repositories/${p["repositoryId"]}/scans/${p["scanId"]}`
    const headers = this._headers({}, opts.headers)
    const query = this._query({excludePermissive: p["excludePermissive"]})

    return this._fetch(url + query, {method: "GET", ...opts, headers}, timeout)
  }

  async scanRepositories(
    p: {
      requestBody: t_scanRepositoriesJsonRequestBody
    },
    timeout?: number,
    opts: RequestInit = {},
  ): Promise<Res<204, void>> {
    const url = this.basePath + `/api/repositories/scan`
    const headers = this._headers(
      {"Content-Type": "application/json"},
      opts.headers,
    )
    const body = JSON.stringify(p.requestBody)

    return this._fetch(url, {method: "POST", body, ...opts, headers}, timeout)
  }
}
