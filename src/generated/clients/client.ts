/** AUTOGENERATED - DO NOT EDIT **/
/* tslint:disable */

import {
  t_License,
  t_RepositorySummary,
  t_scanRepositoriesJsonRequestBody,
} from "@/generated/models"
import {
  AbstractFetchClient,
  AbstractFetchClientConfig,
  Res,
  TypedFetchResponse,
} from "@nahkies/typescript-fetch-runtime/main"

export interface ApiClientConfig extends AbstractFetchClientConfig {}

export class ApiClient extends AbstractFetchClient {
  constructor(config: ApiClientConfig) {
    super(config)
  }

  async getLicenses(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_License[]>>> {
    const url = this.basePath + `/api/licenses`

    return this._fetch(url, {method: "GET", ...(opts ?? {})}, timeout)
  }

  async getRepositorySummaries(
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<200, t_RepositorySummary[]>>> {
    const url = this.basePath + `/api/repositories/summaries`

    return this._fetch(url, {method: "GET", ...(opts ?? {})}, timeout)
  }

  async scanRepositories(
    p: {
      requestBody: t_scanRepositoriesJsonRequestBody
    },
    timeout?: number,
    opts?: RequestInit,
  ): Promise<TypedFetchResponse<Res<204, void>>> {
    const url = this.basePath + `/api/repositories/scan`
    const headers = this._headers({"Content-Type": "application/json"})
    const body = JSON.stringify(p.requestBody)

    return this._fetch(
      url,
      {method: "POST", headers, body, ...(opts ?? {})},
      timeout,
    )
  }
}
